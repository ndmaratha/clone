package main 
import "fmt" 
// Define an interface 
type Shape interface { 
Area() float64 
} 
// Define a struct for Circle 
type Circle struct { 
Radius float64 
} 
// Implement the Area() method for Circle 
func (c Circle) Area() float64 { 
return 3.14 * c.Radius * c.Radius 
} 
// Define a struct for Rectangle 
type Rectangle struct { 
Length float64 
Width  float64 
} 

// Implement the Area() method for Rectangle 
func (r Rectangle) Area() float64 { 
return r.Length * r.Width 
} 
func main() { 
// Create instances of Circle and Rectangle 
circle := Circle{Radius: 5} 
rectangle := Rectangle{Length: 4, Width: 3} 
// Create a slice of Shape interface containing Circle and Rectangle 
shapes := []Shape{circle, rectangle} 
// Iterate through the shapes and display their areas 
for _, shape := range shapes { 
// Check the underlying type of the shape 
switch s := shape.(type) { 
case Circle: 
fmt.Printf("Circle Area: %.2f\n", s.Area()) 
case Rectangle: 
fmt.Printf("Rectangle Area: %.2f\n", s.Area()) 
default: 
fmt.Println("Unknown shape") 
} 
} 
}