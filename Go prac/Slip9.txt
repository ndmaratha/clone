package main
import (
    "fmt"
)

func main() {
    var num int
    fmt.Println("Enter a number:")
    fmt.Scanln(&num)

    if isPalindrome(num) {
        fmt.Println(num, "is a palindrome")
    } else {
        fmt.Println(num, "is not a palindrome")
    }
}

func isPalindrome(num int) bool {
    
    var reverse int = 0
    originalNum := num

    
    for num > 0 {
        digit := num % 10
        reverse = reverse*10 + digit
        num /= 10
    }

    return originalNum == reverse
}

2)
package main 
import ( 
"fmt" 
"math" 
) 
type Shape interface { 
Area() float64 
Perimeter() float64 
} 
type Circle struct { 
Radius float64 
} 
func (c Circle) Area() float64 { 
return math.Pi * c.Radius * c.Radius 
} 
func (c Circle) Perimeter() float64 { 
return 2 * math.Pi * c.Radius 
} 
type Rectangle struct { 
Length float64 
Width  float64 
} 
func (r Rectangle) Area() float64 { 
return r.Length * r.Width 
} 
func (r Rectangle) Perimeter() float64 { 
return 2 * (r.Length + r.Width) 
} 
func main() { 
circle := Circle{Radius: 5} 
rectangle := Rectangle{Length: 4, Width: 3} 
fmt.Println("Circle:") 
fmt.Printf("Area: %.2f\n", circle.Area()) 
fmt.Printf("Perimeter: %.2f\n", circle.Perimeter()) 
fmt.Println("\nRectangle:") 
fmt.Printf("Area: %.2f\n", rectangle.Area()) 
fmt.Printf("Perimeter: %.2f\n", rectangle.Perimeter()) 
}




