SLIP 1
1.WAP in go language to accept user choice and print answers using arithmetic operators.
package main

import (
    "fmt"
)

func main() {
    var num1, num2, choice int

    fmt.Println("Enter first number:")
    fmt.Scanln(&num1)

    fmt.Println("Enter second number:")
    fmt.Scanln(&num2)

    fmt.Println("Enter your choice:")
    fmt.Println("1. Addition")
    fmt.Println("2. Subtraction")
    fmt.Println("3. Multiplication")
    fmt.Println("4. Division")
    fmt.Scanln(&choice)

    switch choice {
    case 1:
        fmt.Printf("Result of addition: %d\n", num1+num2)
    case 2:
        fmt.Printf("Result of subtraction: %d\n", num1-num2)
    case 3:
        fmt.Printf("Result of multiplication: %d\n", num1*num2)
    case 4:
        if num2 != 0 {
            fmt.Printf("Result of division: %d\n", num1/num2)
        } else {
            fmt.Println("Error: Division by zero")
        }
    default:
        fmt.Println("Invalid choice")
    }
}


SLIP 2
2.WAP in go language to print Fibonacci series of n terms.
package main

import (
    "fmt"
)

func main() {
    var n int
    fmt.Println("Enter the number of terms for Fibonacci series:")
    fmt.Scanln(&n)

    fibSeries := fibonacci(n)
    fmt.Println("Fibonacci Series up to", n, "terms:")
    fmt.Println(fibSeries)
}

func fibonacci(n int) []int {
    fibSeries := make([]int, n)
    fibSeries[0] = 0
    if n > 1 {
        fibSeries[1] = 1
    }
    for i := 2; i < n; i++ {
        fibSeries[i] = fibSeries[i-1] + fibSeries[i-2]
    }
    return fibSeries
}

SLIP 3 & SLIP 9
3.WAP in go language using function to check whether accepts number is palindrome or not.

package main

import (
    "fmt"
)

func main() {
    var num int
    fmt.Println("Enter a number:")
    fmt.Scanln(&num)

    if isPalindrome(num) {
        fmt.Println(num, "is a palindrome")
    } else {
        fmt.Println(num, "is not a palindrome")
    }
}

func isPalindrome(num int) bool {
    
    var reverse int = 0
    originalNum := num

    
    for num > 0 {
        digit := num % 10
        reverse = reverse*10 + digit
        num /= 10
    }

    return originalNum == reverse
}

SLIP 4
WAP in go language to sort array elements in ascending order.

package main

import (
    "fmt"
    "sort"
)

func main() {
    arr := []int{5, 3, 8, 2, 1, 4}

    sort.Ints(arr)

    fmt.Println("Sorted array in ascending order:")
    fmt.Println(arr)
}

SLIP 5
WAP in go language to accept n records of employee information (eno,ename,salary) and display records of employees having minimum salary.

package main

import (
    "fmt"
)

type Employee struct {
    eno    int
    ename  string
    salary float64
}

func main() {
    var n int
    fmt.Println("Enter the number of employees:")
    fmt.Scanln(&n)

    
    employees := make([]Employee, n)

    
    for i := 0; i < n; i++ {
        fmt.Printf("Enter details for employee %d:\n", i+1)
        fmt.Print("Employee Number: ")
        fmt.Scanln(&employees[i].eno)
        fmt.Print("Employee Name: ")
        fmt.Scanln(&employees[i].ename)
        fmt.Print("Salary: ")
        fmt.Scanln(&employees[i].salary)
    }

    
    minSalary := employees[0].salary
    for i := 1; i < n; i++ {
        if employees[i].salary < minSalary {
            minSalary = employees[i].salary
        }
    }

    
    fmt.Printf("\nEmployees with minimum salary of %.2f:\n", minSalary)
    for _, emp := range employees {
        if emp.salary == minSalary {
            fmt.Printf("Employee Number: %d, Employee Name: %s, Salary: %.2f\n", emp.eno, emp.ename, emp.salary)
        }
    }
}


SLIP 6
WAP in go language to copy all elements of one array into another using a method.


package main

import "fmt"

func copyArray(source []int, destination []int) {
    for i := 0; i < len(source); i++ {
        destination[i] = source[i]
    }
}

func main() {
    
    sourceArray := []int{1, 2, 3, 4, 5}

    
    destinationArray := make([]int, len(sourceArray))

    
    copyArray(sourceArray, destinationArray)

    fmt.Println("Copied elements in the destination array:")
    fmt.Println(destinationArray)
}

SLIP 7
WAP in go language to accept one matrix and display its transpose.

package main

import (
    "fmt"
)

func main() {
    var m, n int

    
    fmt.Println("Enter dimensions of the matrix (m x n):")
    fmt.Print("m (number of rows): ")
    fmt.Scanln(&m)
    fmt.Print("n (number of columns): ")
    fmt.Scanln(&n)

    
    matrix := make([][]int, m)
    transpose := make([][]int, n)

  
    fmt.Println("Enter elements of the matrix:")
    for i := 0; i < m; i++ {
        matrix[i] = make([]int, n)
        for j := 0; j < n; j++ {
            fmt.Printf("Enter element [%d][%d]: ", i, j)
            fmt.Scanln(&matrix[i][j])
        }
    }

    
    for i := 0; i < n; i++ {
        transpose[i] = make([]int, m)
        for j := 0; j < m; j++ {
            transpose[i][j] = matrix[j][i]
        }
    }

  
    fmt.Println("Transpose of the matrix:")
    for i := 0; i < n; i++ {
        for j := 0; j < m; j++ {
            fmt.Printf("%d\t", transpose[i][j])
        }
        fmt.Println()
    }
}


SLIP 8
WAP in go language to accept the book details such as BOOKID,Author,Price.Read and display the details of 'n' number of books.

package main

import (
    "fmt"
)

type Book struct {
    BookID int
    Author string
    Price  float64
}

func main() {
    var n int
    fmt.Println("Enter the number of books:")
    fmt.Scanln(&n)

    
    books := make([]Book, n)

    
    for i := 0; i < n; i++ {
        fmt.Printf("Enter details for book %d:\n", i+1)
        fmt.Print("Book ID: ")
        fmt.Scanln(&books[i].BookID)
        fmt.Print("Author: ")
        fmt.Scanln(&books[i].Author)
        fmt.Print("Price: ")
        fmt.Scanln(&books[i].Price)
    }

    
    fmt.Println("\nDetails of all the books:")
    for i, book := range books {
        fmt.Printf("Book %d:\n", i+1)
        fmt.Printf("  Book ID: %d\n", book.BookID)
        fmt.Printf("  Author: %s\n", book.Author)
        fmt.Printf("  Price: %.2f\n", book.Price)
    }
}

SLIP 10
WAP in go language to read and write Fibonacci series using the channel.

package main

import "fmt"

func fibonacci(n int, c chan<- int) {
    a, b := 0, 1
    for i := 0; i < n; i++ {
        c <- a
        a, b = b, a+b
    }
    close(c)
}


func writeFibonacci(c <-chan int, output chan<- int) {
    for num := range c {
        output <- num
    }
    close(output)
}

func main() {
    n := 10 

    
    fibonacciChan := make(chan int)
    outputChan := make(chan int)

   
    go fibonacci(n, fibonacciChan)

  
    go writeFibonacci(fibonacciChan, outputChan)

    
    fmt.Println("Fibonacci Series:")
    for num := range outputChan {
        fmt.Println(num)
    }
}

SLIP 11
WAP in go language to check whether the accepted number is two digit or not.

import (
    "fmt"
)

func main() {
    var num int

    fmt.Println("Enter a number:")
    fmt.Scanln(&num)

    if num >= 10 && num <= 99 {
        fmt.Println("The entered number is a two-digit number.")
    } else {
        fmt.Println("The entered number is not a two-digit number.")
    }
}


SLIP 12
WAP in go language to swap two numbers using call by reference concept.

package main

import "fmt"


func swap(x *int, y *int) {
    temp := *x
    *x = *y
    *y = temp
}

func main() {
    var num1, num2 int

    
    fmt.Println("Enter the first number:")
    fmt.Scanln(&num1)
    fmt.Println("Enter the second number:")
    fmt.Scanln(&num2)

   
    fmt.Println("Before swapping:")
    fmt.Println("First number:", num1)
    fmt.Println("Second number:", num2)

  
    swap(&num1, &num2)

    fmt.Println("After swapping:")
    fmt.Println("First number:", num1)
    fmt.Println("Second number:", num2)
}


SLIP 13
WAP in go language to print sum of all even and odd numbers separately between 1 to 100.

package main

import "fmt"

func main() {
    var sumEven, sumOdd int

    
    for i := 1; i <= 100; i++ {
        if i%2 == 0 {
           
            sumEven += i
        } else {
         
            sumOdd += i
        }
    }

    
    fmt.Println("Sum of even numbers between 1 to 100:", sumEven)

 
    fmt.Println("Sum of odd numbers between 1 to 100:", sumOdd)
}


SLIP 14
WAP in go language to demonstrate working of slices(like append,remove,copy etc.)

package main

import "fmt"

func main() {
    
    slice := []int{1, 2, 3, 4, 5}
    fmt.Println("Initial slice:", slice)

    
    slice = append(slice, 6, 7, 8)
    fmt.Println("Slice after appending elements:", slice)

    
    indexToRemove := 2
    slice = append(slice[:indexToRemove], slice[indexToRemove+1:])
    fmt.Println("Slice after removing element at index", indexToRemove, ":", slice)


    copiedSlice := make([]int, len(slice))
    copy(copiedSlice, slice)
    fmt.Println("Copied slice:", copiedSlice)

   
    copiedSlice[0] = 100
    fmt.Println("Modified copied slice:", copiedSlice)

    
    fmt.Println("Original slice:", slice)
}

SLIP 15
WAP in go language to demonstrate function return multiple values.

package main

import "fmt"

func swap(x, y int) (int, int) {
    return y, x
}

func main() {
    a, b := 10, 20

    
    a, b = swap(a, b)

    
    fmt.Println("After swapping:")
    fmt.Println("a =", a)
    fmt.Println("b =", b)
}


SLIP 16
WAP in go language that prints out the numbers from 0 to 10,waiting between 0 and 250ms after each one using the delay function.

package main

import (
	"fmt"
	"time"
)

func main() {
	for i := 0; i <= 10; i++ {
		fmt.Println(i)
		delay(250) 
	}
}

func delay(milliseconds int) {
	time.Sleep(time.Duration(milliseconds) * time.Millisecond)
}


SLIP 17 & SLIP 19
WAP in go language to illustrate the concept of returning multiple values from a function(Add,Subtract,Multiply,Divide)

package main

import "fmt"

func Add(a, b float64) float64 {
    return a + b
}


func Subtract(a, b float64) float64 {
    return a - b
}

func Multiply(a, b float64) float64 {
    return a * b
}


func Divide(a, b float64) (float64, error) {
    if b == 0 {
        return 0, fmt.Errorf("cannot divide by zero")
    }
    return a / b, nil
}

func main() {
    
    num1 := 10
    num2 := 5

    sum := Add(num1, num2)
    fmt.Println("Sum:", sum)

    difference := Subtract(num1, num2)
    fmt.Println("Difference:", difference)

    product := Multiply(num1, num2)
    fmt.Println("Product:", product)

    quotient, err := Divide(num1, num2)
    if err != nil {
        fmt.Println("Error:", err)
    } else {
        fmt.Println("Quotient:", quotient)
    }
}

SLIP 18
WAP in go language to print a multiplication table of number using function.

package main

import "fmt"

func printMultiplicationTable(number int) {
    fmt.Printf("Multiplication table of %d:\n", number)
    for i := 1; i <= 10; i++ {
        fmt.Printf("%d x %d = %d\n", number, i, number*i)
    }
}

func main() {
   
    number := 7
    printMultiplicationTable(number)
}


SLIP 20
WAP in go language how to create a channel and illustrate how to close a channel using for range loop and close function.

package main

import "fmt"

func main() {
    ch := make(chan int)

    
    go func() {
        for i := 1; i <= 5; i++ {
            ch <- i
        }
    
        close(ch)
    }()

    
    fmt.Println("Receiving values from the channel using for range loop:")
    for num := range ch {
        fmt.Println("Received:", num)
    }

    
    ch2 := make(chan string)
    go func() {
        ch2 <- "Hello"
        ch2 <- "World"
        
        close(ch2)
    }()

    fmt.Println("\nReceiving values from the channel using for loop:")
    for {
        msg, ok := <-ch2
        if !ok {
            fmt.Println("Channel closed.")
            break
        }
        fmt.Println("Received:", msg)
    }
}



















